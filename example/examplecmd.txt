//See ExampleListener.java to see how this is registered in Java
//For real plugins, this file should be in the root directory of the jar

//Command format is like this
//This is the base command
//test is its name
//It has no arguments
test {
	//The value in the annotation to look for
	//If no hook is specified, the command does nothing, but its children can still do things
	hook test
	//The help to be displayed when this command's help page is requested or it is used improperly
	help This command does stuff
	//The permission required to run this command
	permission cmd.permissionnode
	//Where this command can be run from: player/console/everyone
	user everyone
	
	//This flag indicates that the command probably has a lot of children, and the children's help messages should not all be shown
	//in the help menu. It will only show the parent command, not children
	hidesub
	
	//Subcommand of test, this would be executed like /test add <args>
	//It has two arguments: int arg1, int arg2
	//num2 is optional
	//These numbers will automatically be cast to int. If there is an error, the command help will be shown.
	add int:num1 int:num2? {
		hook add
		//Multi-line help
		help Adds two numbers together and prints the result in chat.
		help If only one number is provided, prints the first number
		//If no permission is specified, no permission is required
		//If the 'user' tag is not specified, it is usable by anyone
	}
	
	//Default argument types are:
	//int, float, double, long, string, boolean
	
	//This subcommand's name is kill
	//It takes one argument of the *custom type* player
	//See custom type information in ExampleListener.java
	//This argument is optional and the type is not shown
	//In command help, the argument will appear as [player] instead of [player:player]
	//Mandatory arguments are surrounded with <> and optional arguments are surrounded with [] in the command help
	kill player:player*? {
		hook kill
		help Kills the specified player, or the user
		permission kill.someone
		user player
	}
	
	//If the command argument type name and command argument name are both the same (player and player), the type will automatically be hidden in the help menu
	//By putting parenthesis after an optional argument, you can specify a default value
	damage player:player int:amount*?(1) {
		hook damage
		help Damages the specified player with the given amount, or 1
		permission damage.someone
	}
	//This command is very similar to the kill command above
	//The key difference is that this one is using a context provider called 'self'
	//This context provider returns the sender, so if no target is specified, it will use the context provider,
	//Which will pass the command's user to fill that argument rather than null.
	smite player:target*?(context self) {
		hook smite
		help Smites the specified player, or the user
		user player
	}
	
	//This command's name is broadcast
	//Putting ... at the end of an argument will make it consume all arguments following it
	//Must be the last argument
	//All arguments will be passed to the hook method as a single String
	//Aliases are separated by commas in the command name. /broadcast and /bc will work the same.
	broadcast,bc string:message*... {
		hook broadcast
		help Broadcasts a message
		permission message.broadcast
		user everyone
	}
	
	killmount {
		help Kills your mount
		hook healmount
		user player
		permission kill.mount
		//Context is a tag which means that additional info will be passed in the arguments of your method hook
		//The context comes from context providers, which you give to the CommandFactory when creating the command
		context mount
	}
	
}
